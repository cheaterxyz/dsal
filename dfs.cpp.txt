#include<iostream>
using namespace std;

int G[10][10], visited[10], n;

// Recursive DFS function
void DFS(int i) {
    int j;
    cout << i << " "; // Print the current vertex
    visited[i] = 1; // Mark the current vertex as visited

    for (j = 0; j < n; j++) {
        // Explore adjacent vertices that are not visited and have an edge from the current vertex
        if (!visited[j] && G[i][j] == 1) {
            DFS(j);
        }
    }
}

int main() {
    int i, j;
    cout << "Enter the number of vertices: ";
    cin >> n;

    cout << "Enter the adjacency matrix of the graph:\n";
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            cin >> G[i][j];
        }
    }

    // Initialize visited array
    for (i = 0; i < n; i++) {
        visited[i] = 0;
    }

    // Perform DFS starting from each vertex (assuming a connected graph)
    for (i = 0; i < n; i++) {
        if (!visited[i]) {
            DFS(i);
        }
    }

    return 0;
}
